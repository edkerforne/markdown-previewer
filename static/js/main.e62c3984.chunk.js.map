{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","setOptions","gfm","breaks","Preview","props","id","className","dangerouslySetInnerHTML","__html","output","Editor","value","input","onChange","App","handleChange","e","setState","target","state","bind","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAGMA,G,MAASC,EAAQ,KACvBD,EAAOE,WAAW,CAChBC,KAAK,EACLC,QAAQ,IAGV,IA8BMC,EAAU,SAAAC,GACd,OACE,yBAAKC,GAAG,oBAAoBC,UAAU,aACpC,4BAAQA,UAAU,UAAlB,WACA,yBACED,GAAG,UACHE,wBAAyB,CAAEC,OAAQJ,EAAMK,YAM3CC,EAAS,SAAAN,GACb,OACE,yBAAKC,GAAG,mBAAmBC,UAAU,aACnC,4BAAQA,UAAU,UAAlB,YACA,8BAAUK,MAAOP,EAAMQ,MAAOC,SAAUT,EAAMS,SAAUR,GAAG,aA8BlDS,E,YAxBb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KAORW,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZL,MAAOI,EAAEE,OAAOP,SARlB,EAAKQ,MAAQ,CACXP,MAvDW,uuBAyDb,EAAKG,aAAe,EAAKA,aAAaK,KAAlB,gBALH,E,sEAejB,OACE,yBAAKf,GAAG,QACN,kBAAC,EAAD,CAAQQ,SAAUQ,KAAKN,aAAcH,MAAOS,KAAKF,MAAMP,QACvD,kBAAC,EAAD,CAASH,OAAQX,EAAOuB,KAAKF,MAAMP,c,GAnBzBU,IAAMC,WChDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e62c3984.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.scss\";\r\n\r\nconst marked = require(\"marked\");\r\nmarked.setOptions({\r\n  gfm: true,\r\n  breaks: true\r\n});\r\n\r\nconst defaultText = `# Welcome to my Markdown previewer!\r\n## Level 2 heading\r\n### Level 3 heading\r\n\r\nMarkdown is great! You can bold text, _italicize it_, or ~~cross it out~~.\r\n\r\nYou can make text \\`monospace\\` or put it in a code block, like this:\r\n\r\n\\`\\`\\`\r\nconst greeting = () => {\r\n  console.log('Hello, world!');\r\n};\r\ngreeting();\r\n\\`\\`\\`\r\n\r\nCarriage returns\r\nrender as a line break.\r\n\r\nYou can make lists, too:\r\n* Eat\r\n* Sleep\r\n* Code\r\n* Repeat\r\n\r\n> Or use blockquotes, they're pretty neat!\r\n\r\nYou can [click here](https://en.wikipedia.org/wiki/Markdown) to read about this markup language on Wikipedia. Finally, here's the Markdown logo:\r\n![Markdown logo](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/800px-Markdown-mark.svg.png)\r\n`;\r\n\r\nconst Preview = props => {\r\n  return (\r\n    <div id=\"preview-container\" className=\"container\">\r\n      <header className=\"header\">Preview</header>\r\n      <div\r\n        id=\"preview\"\r\n        dangerouslySetInnerHTML={{ __html: props.output }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Editor = props => {\r\n  return (\r\n    <div id=\"editor-container\" className=\"container\">\r\n      <header className=\"header\">Markdown</header>\r\n      <textarea value={props.input} onChange={props.onChange} id=\"editor\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: defaultText\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      input: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"main\">\r\n        <Editor onChange={this.handleChange} input={this.state.input} />\r\n        <Preview output={marked(this.state.input)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}